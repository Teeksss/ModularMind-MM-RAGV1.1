name: ModularMind Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run backend tests
        run: |
          pytest ModularMind/tests/ --cov=ModularMind --cov-report=xml
      
      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test -- --coverage
      
      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
      
      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend
  
  build-images:
    name: Build and Push Docker Images
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/modularmind-api:${{ steps.get_version.outputs.VERSION }}
            ghcr.io/${{ github.repository }}/modularmind-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/modularmind-frontend:${{ steps.get_version.outputs.VERSION }}
            ghcr.io/${{ github.repository }}/modularmind-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
  create-release:
    name: Create GitHub Release
    needs: build-images
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.0.1
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## ModularMind RAG Platform ${{ github.ref_name }}
            
            ### Changes
            ${{ steps.changelog.outputs.changelog }}
            
            ### Docker Images
            - Backend: `ghcr.io/${{ github.repository }}/modularmind-api:${{ github.ref_name }}`
            - Frontend: `ghcr.io/${{ github.repository }}/modularmind-frontend:${{ github.ref_name }}`
            
            ### Deployment
            ```bash
            docker-compose pull
            docker-compose up -d
            ```
          draft: false
          prerelease: false
  
  deploy-production:
    name: Deploy to Production
    needs: create-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-beta') && !contains(github.ref, '-alpha')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.PROD_KNOWN_HOSTS }}
          config: |
            Host production
              HostName ${{ secrets.PROD_HOST }}
              User ${{ secrets.PROD_USER }}
              IdentityFile ~/.ssh/id_rsa
      
      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Create deploy script
        run: |
          cat > deploy.sh << 'EOL'
          #!/bin/bash
          set -e
          
          # Change to deployment directory
          cd /opt/modularmind
          
          # Update .env file with new version
          echo "MODULARMIND_VERSION=${{ steps.get_version.outputs.VERSION }}" > .env
          
          # Pull new images and restart
          docker-compose pull
          docker-compose up -d
          
          # Clean up old images
          docker image prune -af --filter "until=24h"
          
          # Verify deployment
          docker-compose ps
          echo "Deployment completed successfully"
          EOL
          
          chmod +x deploy.sh
      
      - name: Copy deploy script to server
        run: scp -o StrictHostKeyChecking=no deploy.sh production:/tmp/deploy.sh
      
      - name: Execute deploy script
        run: ssh -o StrictHostKeyChecking=no production "bash /tmp/deploy.sh"
      
      - name: Notify deployment status
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context } = require('@actions/github');
            const status = '${{ job.status }}' === 'success' ? '✅ successful' : '❌ failed';
            const message = `Production deployment ${status} for ${{ github.ref_name }}`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number || context.payload.pull_request?.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });