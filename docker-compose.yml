version: '3.8'

services:
  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: modular-mind-api:1.1
    container_name: modular-mind-api
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./config:/app/config
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/modularmind
      - EMBEDDING_SERVICE_URL=http://embedding-service:8001
      - LOG_LEVEL=INFO
      - METRICS_ENABLED=true
    depends_on:
      - db
      - embedding-service
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Embedding Service
  embedding-service:
    build:
      context: ./embedding-service
      dockerfile: Dockerfile
    image: modular-mind-embedding:1.1
    container_name: modular-mind-embedding
    ports:
      - "8001:8001"
    volumes:
      - ./models:/app/models
      - ./config:/app/config
    environment:
      - LOG_LEVEL=INFO
      - MAX_CONCURRENT_REQUESTS=10
      - PRELOAD_MODELS=all-MiniLM-L6-v2,paraphrase-multilingual-MiniLM-L12-v2
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - API_URL=http://localhost:8000
    image: modular-mind-frontend:1.1
    container_name: modular-mind-frontend
    ports:
      - "80:80"
    restart: unless-stopped
    depends_on:
      - api
    networks:
      - app-network

  # Database
  db:
    image: postgres:14-alpine
    container_name: modular-mind-db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=modularmind
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Redis for caching and background tasks
  redis:
    image: redis:7-alpine
    container_name: modular-mind-redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: modular-mind-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    networks:
      - app-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: modular-mind-grafana
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - app-network

  # Node Exporter for host metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: modular-mind-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks:
      - app-network

  # Alert Manager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: modular-mind-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  grafana_data: